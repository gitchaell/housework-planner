/* eslint-disable @typescript-eslint/no-non-null-assertion */
import fs from 'fs';
import { MessageMedia } from 'whatsapp-web.js';
import { createEvents, EventAttributes } from 'ics';
// types
import { App } from '../types/global.type';
// repositories
import { responsableRepository, taskRepository } from '../repositories';
// models
import { Task, WeekMap } from '../models';
// utils
import { slug, toDateArray } from '../utils';


const app = global as App;

export class HouseworkPlanner {

  weekMap?: WeekMap;
  icspaths: Record<string, string> = {};

  execute() {

    responsableRepository.cleanAllUnavailableHoursByTasks();
    taskRepository.cleanTaskByWeekCache();

    this.buildWeekMap();
    this.writeICSFiles();
    this.sendICSFiles();
    this.printWeekMap();
  }

  private buildWeekMap() {

    this.weekMap = new WeekMap();

    for (let weekday = 1; weekday <= 7; weekday++) {

      const tasksByDay = taskRepository.getAll({ once: 'day' });
      const tasksByWeek = taskRepository.getAll({ once: 'week' });

      for (const task of [...tasksByDay!, ...tasksByWeek!]) {

        if (task.once === 'week')
          taskRepository.addInCache(task);

        const taskRef = new Task({ ...task });

        const responsable = responsableRepository.get({ mode: 'random' })!;

        taskRef.assignResponsable(responsable);
        taskRef.assignHourRange(weekday);

        responsable.addUnavailableHoursRangePerTask(weekday, taskRef.hourRange!);

        this.weekMap.addTask(weekday, taskRef);
      }
    }

    app.logger.info('Tasks of the week mapped by each responsable');
  }

  private writeICSFiles() {

    for (const responsable of responsableRepository.getAll()) {

      // const date = new Date(Date.now());
      const date = new Date(2022, 8, 26, 0, 0, 0, 0);
      const dirname = slug(date.toDateString());

      const events: EventAttributes[] = [];

      for (let weekday = 1; weekday <= 7; weekday++) {

        for (let hour = 1; hour <= 24; hour++) {

          const task = this.weekMap?.getTask({ weekday, hour, responsable });

          if (!task) continue;

          const startDate = date;
          startDate.setHours(hour);

          const endDate = date;
          endDate.setHours(hour + 1);

          events.push({
            title: task.name!,
            start: toDateArray(startDate),
            end: toDateArray(endDate),
          } as EventAttributes);
        }

        date.setDate(date.getDate() + 1);
      }

      const { error, value } = createEvents(events);

      if (error) throw error;

      const dirpath = `./output/${dirname}`;
      const icspath = `${dirpath}/${slug(responsable.name!)}.houseworks.ics`;
      this.icspaths[slug(responsable.name!)] = icspath;

      fs.mkdirSync(dirpath, { recursive: true });
      fs.writeFileSync(icspath, value!);
    }

    app.logger.info('ICS files generated by each responsable');
  }

  private sendICSFiles() {

    for (const { name, phone } of responsableRepository.getAll()) {

      const media = MessageMedia.fromFilePath(this.icspaths[slug(name!)]);

      app.whatsapp.client.sendMessage(`${phone}@c.us`, media, { caption: 'ICS' }).then(() => {
        app.logger.info(`ICS File successfully sent to ${name!}`)
      });

    }
  }

  private printWeekMap() {

    for (const responsable of responsableRepository.getAll()) {

      console.log(responsable.name);

      const weekTable = [];

      for (let hour = 1; hour <= 24; hour++) {

        const row: Record<number, string | null> = {};

        for (let weekday = 1; weekday <= 7; weekday++) {

          const task = this.weekMap!.getTask({ weekday, hour, responsable });

          row[weekday] = task?.name ?? '*';
        }

        weekTable.push(row);
      }

      console.table(weekTable);
    }
  }
}